var GlobalEDK,main=main||{};main.General=function(){},main.General.prototype={init:function(){GlobalEDK.init()}},$(document).ready(function(){(new main.General).init()}),GlobalEDK={init:function(){GlobalEDK.EDK_class(),GlobalEDK.EDK_image(),GlobalEDK.PopupListener()},EDK_class:function(){chrome.storage.sync.get(["dk"],function(n){"disabled"===n.dk&&$("body").addClass("EDK__body")})},EDK_image:function(){$(".info-section").each(function(){$(this).append('<div class="bg-filter"></div>')})},PopupListener:function(){chrome.extension.onRequest.addListener(function(n,e,o){switch(n.action){case"switch":$("body").toggleClass("EDK__body"),o({done:"switch"});break;case"redirect":chrome.storage.sync.get(["url"],function(n){var e=n.url;chrome.storage.sync.set({url:""}),window.location.href=e,o({done:"redirect to"+e})});break;case"testConnection":o({done:"ConnectionSuccess"});break;default:o({done:"no action"})}})}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiR2xvYmFsRURLIiwibWFpbiIsIkdlbmVyYWwiLCJwcm90b3R5cGUiLCJpbml0IiwiJCIsImRvY3VtZW50IiwicmVhZHkiLCJFREtfY2xhc3MiLCJFREtfaW1hZ2UiLCJQb3B1cExpc3RlbmVyIiwiY2hyb21lIiwic3RvcmFnZSIsInN5bmMiLCJnZXQiLCJyZXN1bHQiLCJkayIsImFkZENsYXNzIiwiZWFjaCIsInRoaXMiLCJhcHBlbmQiLCJleHRlbnNpb24iLCJvblJlcXVlc3QiLCJhZGRMaXN0ZW5lciIsInJlcXVlc3QiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJhY3Rpb24iLCJ0b2dnbGVDbGFzcyIsImRvbmUiLCJ1cmwiLCJzZXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiXSwibWFwcGluZ3MiOiJBQUNBLElBaUJBQSxVQWpCQUMsS0FBQUEsTUFBQSxHQUVBQSxLQUFBQyxRQUFBLGFBR0FELEtBQUFDLFFBQUFDLFVBQUEsQ0FDQUMsS0FBQSxXQUNBSixVQUFBSSxTQUlBQyxFQUFBQyxVQUFBQyxNQUFBLFlBQ0EsSUFBQU4sS0FBQUMsU0FDQUUsU0FLQUosVUFBQSxDQUVBSSxLQUFBLFdBQ0FKLFVBQUFRLFlBQ0FSLFVBQUFTLFlBQ0FULFVBQUFVLGlCQUVBRixVQUFBLFdBQ0FHLE9BQUFDLFFBQUFDLEtBQUFDLElBQUEsQ0FBQSxNQUFBLFNBQUFDLEdBQ0EsYUFBQUEsRUFBQUMsSUFDQVgsRUFBQSxRQUFBWSxTQUFBLGdCQUlBUixVQUFBLFdBTUFKLEVBQUEsaUJBQUFhLEtBQUEsV0FDQWIsRUFBQWMsTUFBQUMsT0FBQSxvQ0FHQVYsY0FBQSxXQUNBQyxPQUFBVSxVQUFBQyxVQUFBQyxZQUNBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUYsRUFBQUcsUUFFQSxJQUFBLFNBQ0F0QixFQUFBLFFBQUF1QixZQUFBLGFBQ0FGLEVBQUEsQ0FBQUcsS0FBQSxXQUNBLE1BRUEsSUFBQSxXQUNBbEIsT0FBQUMsUUFBQUMsS0FBQUMsSUFBQSxDQUFBLE9BQUEsU0FBQUMsR0FDQSxJQUFBZSxFQUFBZixFQUFBZSxJQUNBbkIsT0FBQUMsUUFBQUMsS0FBQWtCLElBQUEsQ0FBQUQsSUFBQSxLQUVBRSxPQUFBQyxTQUFBQyxLQUFBSixFQUNBSixFQUFBLENBQUFHLEtBQUEsY0FBQUMsTUFFQSxNQUVBLElBQUEsaUJBQ0FKLEVBQUEsQ0FBQUcsS0FBQSxzQkFDQSxNQUVBLFFBQ0FILEVBQUEsQ0FBQUcsS0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRGVjbGFyZSBuYW1lc3BhY2VcbnZhciBtYWluID0gbWFpbiB8fCB7fTtcblxubWFpbi5HZW5lcmFsID0gZnVuY3Rpb24gKCkge1xufTtcblxubWFpbi5HZW5lcmFsLnByb3RvdHlwZSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEdsb2JhbEVESy5pbml0KCk7XG4gICAgfVxufTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBnID0gbmV3IG1haW4uR2VuZXJhbCgpO1xuICAgIGcuaW5pdCgpO1xufSk7XG5cbi8vU3RhcnRcbnZhciBHbG9iYWxFREs7XG5HbG9iYWxFREsgPSB7XG4gICAgLy9Jbml0XG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBHbG9iYWxFREsuRURLX2NsYXNzKCk7XG4gICAgICAgIEdsb2JhbEVESy5FREtfaW1hZ2UoKTtcbiAgICAgICAgR2xvYmFsRURLLlBvcHVwTGlzdGVuZXIoKTtcbiAgICB9LFxuICAgIEVES19jbGFzczogZnVuY3Rpb24gKCkge1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChbJ2RrJ10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuZGsgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ0VES19fYm9keScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIEVES19pbWFnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAkKCcuc2VhcmNoLXNlY3Rpb24gLmNvbnRlbnQgYScpLmFwcGVuZChcbiAgICAgICAgLy8gICAgICc8aW1nIHNyYz1cImh0dHBzOi8vaS5pYmIuY28vaGRMYmNaQy9sb2dvLWVjb3NpYS1kYXJrLWZ1bGwucG5nXCIgYWx0PVwiRWNvc2lhXCIgYm9yZGVyPVwiMFwiPidcbiAgICAgICAgLy8gKTtcblxuICAgICAgICAvL3RoaXMgcGVybWl0IHRvIGFkZCBhIGZpbHRlciB0byBzdmcgaW1hZ2UgdGhhdCBhcmUgcGxhY2UgaW4gYmFja2dyb3VuZCB3aXRob3V0IGFwcGx5aW5nIHRoZSBmaWx0ZXIgb24gdGhlIGNoaWxkIGNvbnRlbnRcbiAgICAgICAgJCgnLmluZm8tc2VjdGlvbicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJiZy1maWx0ZXJcIj48L2Rpdj4nKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBQb3B1cExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNocm9tZS5leHRlbnNpb24ub25SZXF1ZXN0LmFkZExpc3RlbmVyKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChyZXF1ZXN0LmFjdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzd2l0Y2hcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS50b2dnbGVDbGFzcygnRURLX19ib2R5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2Uoe2RvbmU6ICdzd2l0Y2gnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmVkaXJlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsndXJsJ10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gcmVzdWx0LnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7dXJsOiAnJ30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtkb25lOiAncmVkaXJlY3QgdG8nICsgdXJsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0ZXN0Q29ubmVjdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtkb25lOiAnQ29ubmVjdGlvblN1Y2Nlc3MnfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtkb25lOiAnbm8gYWN0aW9uJ30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG59O1xuIl19
