var PopupEDK,main=main||{};main.General=function(){},main.General.prototype={init:function(){PopupEDK.switch(),PopupEDK.onPopupOpen(),PopupEDK.googleSearch(),PopupEDK.closeAlert(),PopupEDK.showNoDomainAlert(),PopupEDK.translations()}},$(document).ready(function(){(new main.General).init()}),PopupEDK={switch:function(){$(".switch-onoff__slide").on("click",function(e){e.preventDefault(),chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"switch"},function(e){e&&("switch"===e.done?PopupEDK.switchBtn():console.log(e))})})})},logStorage:function(){chrome.storage.sync.get(["dk"],function(e){console.log(e.dk)})},switchBtn:function(){var n=$(".switch-onoff__slide");chrome.storage.sync.get(["dk"],function(e){"disabled"===e.dk?(chrome.storage.sync.set({dk:"enabled"}),n.removeClass("open")):(chrome.storage.sync.set({dk:"disabled"}),n.addClass("open"))}),PopupEDK.logStorage()},onPopupOpen:function(){var n=$(".switch-onoff__slide");void 0!==chrome.storage&&chrome.storage.sync.get(["dk"],function(e){"disabled"===e.dk?n.addClass("open"):("undefined"===e.dk&&chrome.storage.sync.set({dk:"disabled"}),n.removeClass("open"))})},googleSearch:function(){$("#google-search").on("submit",function(){var e=$(this).attr("action");$input=$(this).find(".search__input");var n=e+"?"+$input.attr("name")+"="+$input.val();chrome.storage.sync.set({url:n}),chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"redirect"},function(e){e&&("redirect"===e.done?console.log("Redirected"):console.log(e))})})})},closeAlert:function(){var e=$(".alert"),n=[];void 0!==chrome.storage&&chrome.storage.sync.get(["alerts"],function(e){void 0!==e.alerts&&(n=e.alerts),void 0!==n&&$.each(n,function(e,n){$("#"+n).addClass("d-none")})}),setTimeout(function(){e.length!==n.length&&$(".warning__container").removeClass("d-none")},250),e.on("closed.bs.alert",function(){void 0!==chrome.storage&&(n.push(this.id),chrome.storage.sync.set({alerts:n}))})},showNoDomainAlert:function(){new Promise(function(n,o){chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"testConnection"},function(e){e?"ConnectionSuccess"===e.done?n("ConnectionSuccess"):o(e):o("ConnectionFailed")})})}).then(function(e){console.log(e)}).catch(function(e){console.log(e),$(".popup__disabled, .popup__container").toggleClass("d-none")})},translations:function(){for(var e=$("[data-i18n]"),n=0;n<e.length;++n){var o=e[n],t=o.getAttribute("data-i18n"),c=o.getAttribute("data-i18n-target");switch(console.log(c),c){case"placeholder":o.attr("placeholder",t);break;default:o.innerHTML=PopupEDK.getTranslation(t)}}},getTranslation:function(e,n){return chrome.i18n.getMessage(e)}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
