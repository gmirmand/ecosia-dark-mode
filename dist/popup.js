var PopupEDK,main=main||{};main.General=function(){},main.General.prototype={init:function(){PopupEDK.switch(),PopupEDK.onPopupOpen(),PopupEDK.googleSearch(),PopupEDK.closeAlert(),PopupEDK.showNoDomainAlert(),PopupEDK.translations(),PopupEDK.analytics()}},$(document).ready(function(){(new main.General).init()}),PopupEDK={service:void 0,tracker:void 0,tmpConsent:void 0,switch:function(){$(".switch-onoff__slide").on("click",function(e){e.preventDefault(),chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"switch"},function(e){e&&("switch"===e.done?PopupEDK.switchBtn():console.log(e))})})})},logStorage:function(n){chrome.storage.sync.get([n],function(e){console.log(e[n])})},switchBtn:function(){var t=$(".switch-onoff__slide");chrome.storage.sync.get(["dk"],function(e){"disabled"===e.dk?(chrome.storage.sync.set({dk:"enabled"}),t.removeClass("open")):(chrome.storage.sync.set({dk:"disabled"}),t.addClass("open"));var n="disabled"===e.dk?"dark enabled":"dark disabled";PopupEDK.tracker.sendEvent("Popup","Switch","L'utilisateur a fait un switch | Status : "+n)})},onPopupOpen:function(){var n=$(".switch-onoff__slide");void 0!==chrome.storage&&chrome.storage.sync.get(["dk"],function(e){"disabled"===e.dk?n.addClass("open"):("undefined"===e.dk&&chrome.storage.sync.set({dk:"disabled"}),n.removeClass("open"))})},googleSearch:function(){$("#google-search").on("submit",function(){PopupEDK.tracker.sendEvent("Popup","Search","L'utilisateur a fait une recherche google");var e=$(this).attr("action");$input=$(this).find(".search__input");var n=e+"?"+$input.attr("name")+"="+$input.val();chrome.storage.sync.set({url:n}),chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"redirect"},function(e){e&&("redirect"===e.done?console.log("Redirected"):console.log(e))})})})},closeAlert:function(){var e=$(".alert"),n=[];void 0!==chrome.storage&&chrome.storage.sync.get(["alerts"],function(e){void 0!==e.alerts&&(n=e.alerts),void 0!==n&&$.each(n,function(e,n){$("div[data-alert-id="+n+"]").addClass("d-none")})}),setTimeout(function(){e.length!==n.length&&$(".warning__container").removeClass("d-none")},250),$(".alert button").on("click",function(){PopupEDK.tmpConsent=$(this).data("agree")}),e.on("closed.bs.alert",function(){void 0!==chrome.storage&&(n.push($(this).data("alert-id")),chrome.storage.sync.set({alerts:n}),PopupEDK.tmpConsent&&(chrome.storage.sync.set({rgpd_consent:PopupEDK.tmpConsent}),PopupEDK.tmpConsent=void 0))})},showNoDomainAlert:function(){new Promise(function(n,t){chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"testConnection"},function(e){e?"ConnectionSuccess"===e.done?n("ConnectionSuccess"):t(e):t("ConnectionFailed")})})}).then(function(e){console.log(e)}).catch(function(e){console.log(e),$(".popup__disabled, .popup__container").toggleClass("d-none")})},translations:function(){for(var e=$("[data-i18n]"),n=0;n<e.length;++n){var t=e[n],o=t.getAttribute("data-i18n");switch(t.getAttribute("data-i18n-target")){case"placeholder":t.attr("placeholder",o);break;default:t.innerHTML=PopupEDK.getTranslation(o)}}},getTranslation:function(e,n){return chrome.i18n.getMessage(e)},analytics:function(){PopupEDK.service=analytics.getService("ecosia_extension"),PopupEDK.service.getConfig().addCallback(function(t){chrome.storage.sync.get(["rgpd_consent"],function(e){var n=e.rgpd_consent;t.setTrackingPermitted(!0===n)})}),PopupEDK.tracker=PopupEDK.service.getTracker("UA-160182955-1"),PopupEDK.tracker.sendAppView("MainView"),PopupEDK.tracker.sendEvent("Popup","Open","L'utilisateur a ouvert la popup")}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvcHVwLmpzIl0sIm5hbWVzIjpbIlBvcHVwRURLIiwibWFpbiIsIkdlbmVyYWwiLCJwcm90b3R5cGUiLCJpbml0Iiwic3dpdGNoIiwib25Qb3B1cE9wZW4iLCJnb29nbGVTZWFyY2giLCJjbG9zZUFsZXJ0Iiwic2hvd05vRG9tYWluQWxlcnQiLCJ0cmFuc2xhdGlvbnMiLCJhbmFseXRpY3MiLCIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsInNlcnZpY2UiLCJ1bmRlZmluZWQiLCJ0cmFja2VyIiwidG1wQ29uc2VudCIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2hyb21lIiwidGFicyIsInF1ZXJ5IiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsInNlbmRSZXF1ZXN0IiwiaWQiLCJhY3Rpb24iLCJyZXNwIiwiZG9uZSIsInN3aXRjaEJ0biIsImNvbnNvbGUiLCJsb2ciLCJsb2dTdG9yYWdlIiwia2V5Iiwic3RvcmFnZSIsInN5bmMiLCJnZXQiLCJyZXN1bHQiLCJidXR0b24iLCJkayIsInNldCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzdGF0dXMiLCJzZW5kRXZlbnQiLCJ0aGlzIiwiYXR0ciIsIiRpbnB1dCIsImZpbmQiLCJ1cmwiLCJ2YWwiLCIkYWxsQWxlcnRzIiwiY2hyb21lU3RvcmFnZUFsZXJ0cyIsImFsZXJ0cyIsImVhY2giLCJpIiwidmFsdWUiLCJzZXRUaW1lb3V0IiwibGVuZ3RoIiwiZGF0YSIsInB1c2giLCJyZ3BkX2NvbnNlbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsImVycm9yIiwidG9nZ2xlQ2xhc3MiLCJ0cmFuc2xhdGVfZWxtdHMiLCJpdGVtIiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiZ2V0VHJhbnNsYXRpb24iLCJwYXJhbXMiLCJpMThuIiwiZ2V0TWVzc2FnZSIsImdldFNlcnZpY2UiLCJnZXRDb25maWciLCJhZGRDYWxsYmFjayIsImNvbmZpZyIsInBlcm1pdHRlZCIs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LE1BSUF3QyxlQUFBLFNBQUF4QyxFQUFBeUMsR0FDQSxPQUFBdkQsT0FBQXdELEtBQUFDLFdBQUEzQyxJQUVBekIsVUFBQSxXQUNBWCxTQUFBZSxRQUFBSixVQUFBcUUsV0FBQSxvQkFFQWhGLFNBQUFlLFFBQUFrRSxZQUFBQyxZQUNBLFNBQUFDLEdBQ0E3RCxPQUFBZSxRQUFBQyxLQUFBQyxJQUFBLENBQUEsZ0JBQUEsU0FBQUMsR0FDQSxJQUFBNEMsRUFBQTVDLEVBQUF3QixhQUNBbUIsRUFBQUUsc0JBQUEsSUFBQUQsT0FJQXBGLFNBQUFpQixRQUFBakIsU0FBQWUsUUFBQXVFLFdBQUEsa0JBRUF0RixTQUFBaUIsUUFBQXNFLFlBQUEsWUFFQXZGLFNBQUFpQixRQUFBOEIsVUFBQSxRQUFBLE9BQUEiLCJmaWxlIjoicG9wdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZWNsYXJlIG5hbWVzcGFjZVxudmFyIG1haW4gPSBtYWluIHx8IHt9O1xuXG5tYWluLkdlbmVyYWwgPSBmdW5jdGlvbiAoKSB7XG59O1xuXG5tYWluLkdlbmVyYWwucHJvdG90eXBlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgUG9wdXBFREsuc3dpdGNoKCk7XG4gICAgICAgIFBvcHVwRURLLm9uUG9wdXBPcGVuKCk7XG4gICAgICAgIFBvcHVwRURLLmdvb2dsZVNlYXJjaCgpO1xuICAgICAgICBQb3B1cEVESy5jbG9zZUFsZXJ0KCk7XG4gICAgICAgIFBvcHVwRURLLnNob3dOb0RvbWFpbkFsZXJ0KCk7XG4gICAgICAgIFBvcHVwRURLLnRyYW5zbGF0aW9ucygpO1xuICAgICAgICBQb3B1cEVESy5hbmFseXRpY3MoKTtcbiAgICB9XG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGcgPSBuZXcgbWFpbi5HZW5lcmFsKCk7XG4gICAgZy5pbml0KCk7XG59KTtcblxuLy9TdGFydFxudmFyIFBvcHVwRURLO1xuUG9wdXBFREsgPSB7XG4gICAgc2VydmljZTogdW5kZWZpbmVkLFxuICAgIHRyYWNrZXI6IHVuZGVmaW5lZCxcbiAgICB0bXBDb25zZW50OiB1bmRlZmluZWQsXG4gICAgc3dpdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidXR0b24gPSAkKCcuc3dpdGNoLW9ub2ZmX19zbGlkZScpO1xuICAgICAgICBidXR0b24ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHthY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWV9LCBmdW5jdGlvbiAodGFicykge1xuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRSZXF1ZXN0KHRhYnNbMF0uaWQsIHthY3Rpb246IFwic3dpdGNoXCJ9LCBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3AuZG9uZSA9PT0gXCJzd2l0Y2hcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvcHVwRURLLnN3aXRjaEJ0bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9nU3RvcmFnZTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChba2V5XSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0W2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHN3aXRjaEJ0bjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9uID0gJCgnLnN3aXRjaC1vbm9mZl9fc2xpZGUnKTtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoWydkayddLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmRrID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe2RrOiAnZW5hYmxlZCd9KTtcbiAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe2RrOiAnZGlzYWJsZWQnfSk7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZENsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSByZXN1bHQuZGsgPT09ICdkaXNhYmxlZCcgPyAnZGFyayBlbmFibGVkJyA6ICdkYXJrIGRpc2FibGVkJztcbiAgICAgICAgICAgIFBvcHVwRURLLnRyYWNrZXIuc2VuZEV2ZW50KCdQb3B1cCcsICdTd2l0Y2gnLCBcIkwndXRpbGlzYXRldXIgYSBmYWl0IHVuIHN3aXRjaCB8IFN0YXR1cyA6IFwiICsgc3RhdHVzKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBvblBvcHVwT3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnV0dG9uID0gJCgnLnN3aXRjaC1vbm9mZl9fc2xpZGUnKTtcbiAgICAgICAgaWYgKGNocm9tZS5zdG9yYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsnZGsnXSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZGsgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmFkZENsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGsgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtkazogJ2Rpc2FibGVkJ30pO1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ29vZ2xlU2VhcmNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJyNnb29nbGUtc2VhcmNoJykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFBvcHVwRURLLnRyYWNrZXIuc2VuZEV2ZW50KCdQb3B1cCcsICdTZWFyY2gnLCBcIkwndXRpbGlzYXRldXIgYSBmYWl0IHVuZSByZWNoZXJjaGUgZ29vZ2xlXCIpO1xuXG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gJCh0aGlzKS5hdHRyKCdhY3Rpb24nKTtcbiAgICAgICAgICAgICRpbnB1dCA9ICQodGhpcykuZmluZCgnLnNlYXJjaF9faW5wdXQnKTtcbiAgICAgICAgICAgIHZhciBuYW1lID0gJGlucHV0LmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9ICRpbnB1dC52YWwoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBhY3Rpb24gKyAnPycgKyBuYW1lICsgJz0nICsgdmFsdWU7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7dXJsOiB1cmx9KTtcblxuICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkoe2FjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZX0sIGZ1bmN0aW9uICh0YWJzKSB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnRhYnMuc2VuZFJlcXVlc3QodGFic1swXS5pZCwge2FjdGlvbjogXCJyZWRpcmVjdFwifSwgZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwLmRvbmUgPT09IFwicmVkaXJlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWRpcmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBjbG9zZUFsZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkYWxsQWxlcnRzID0gJCgnLmFsZXJ0JyksXG4gICAgICAgICAgICBjaHJvbWVTdG9yYWdlQWxlcnRzID0gW107XG4gICAgICAgIGlmIChjaHJvbWUuc3RvcmFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChbJ2FsZXJ0cyddLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5hbGVydHMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lU3RvcmFnZUFsZXJ0cyA9IHJlc3VsdC5hbGVydHM7XG4gICAgICAgICAgICAgICAgaWYgKGNocm9tZVN0b3JhZ2VBbGVydHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goY2hyb21lU3RvcmFnZUFsZXJ0cywgZnVuY3Rpb24gKGksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdkaXZbZGF0YS1hbGVydC1pZD0nK3ZhbHVlKyddJykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRhbGxBbGVydHMubGVuZ3RoICE9PSBjaHJvbWVTdG9yYWdlQWxlcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICQoJy53YXJuaW5nX19jb250YWluZXInKS5yZW1vdmVDbGFzcygnZC1ub25lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDI1MCk7XG5cbiAgICAgICAgJCgnLmFsZXJ0IGJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgUG9wdXBFREsudG1wQ29uc2VudCA9ICQodGhpcykuZGF0YSgnYWdyZWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGFsbEFsZXJ0cy5vbignY2xvc2VkLmJzLmFsZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGNocm9tZS5zdG9yYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjaHJvbWVTdG9yYWdlQWxlcnRzLnB1c2goJCh0aGlzKS5kYXRhKFwiYWxlcnQtaWRcIikpO1xuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHthbGVydHM6IGNocm9tZVN0b3JhZ2VBbGVydHN9KTtcblxuICAgICAgICAgICAgICAgIGlmKFBvcHVwRURLLnRtcENvbnNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoe3JncGRfY29uc2VudDogUG9wdXBFREsudG1wQ29uc2VudH0pO1xuICAgICAgICAgICAgICAgICAgICBQb3B1cEVESy50bXBDb25zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBzaG93Tm9Eb21haW5BbGVydDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciB0cnlDb25uZWN0aW9uID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkoe2FjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZX0sIGZ1bmN0aW9uICh0YWJzKSB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnRhYnMuc2VuZFJlcXVlc3QodGFic1swXS5pZCwge2FjdGlvbjogXCJ0ZXN0Q29ubmVjdGlvblwifSwgZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwLmRvbmUgPT09IFwiQ29ubmVjdGlvblN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ0Nvbm5lY3Rpb25TdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnQ29ubmVjdGlvbkZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5Q29ubmVjdGlvbi50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAgICAgICAgfSkuY2F0Y2goXG4gICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgJCgnLnBvcHVwX19kaXNhYmxlZCwgLnBvcHVwX19jb250YWluZXInKS50b2dnbGVDbGFzcygnZC1ub25lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSxcbiAgICB0cmFuc2xhdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdHJhbnNsYXRlX2VsbXRzID0gJChcIltkYXRhLWkxOG5dXCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zbGF0ZV9lbG10cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0cmFuc2xhdGVfZWxtdHNbaV07XG5cbiAgICAgICAgICAgIHZhciBrZXkgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pMThuJyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaTE4bi10YXJnZXQnKTtcblxuICAgICAgICAgICAgc3dpdGNoKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hdHRyKCdwbGFjZWhvbGRlcicsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5uZXJIVE1MID0gUG9wdXBFREsuZ2V0VHJhbnNsYXRpb24oa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VHJhbnNsYXRpb246IGZ1bmN0aW9uKGtleSwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBjaHJvbWUuaTE4bi5nZXRNZXNzYWdlKGtleSk7XG4gICAgfSxcbiAgICBhbmFseXRpY3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICBQb3B1cEVESy5zZXJ2aWNlID0gYW5hbHl0aWNzLmdldFNlcnZpY2UoJ2Vjb3NpYV9leHRlbnNpb24nKTtcblxuICAgICAgICBQb3B1cEVESy5zZXJ2aWNlLmdldENvbmZpZygpLmFkZENhbGxiYWNrKFxuICAgICAgICAgIGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChbJ3JncGRfY29uc2VudCddLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcGVybWl0dGVkID0gcmVzdWx0LnJncGRfY29uc2VudDtcbiAgICAgICAgICAgICAgICAgIGNvbmZpZy5zZXRUcmFja2luZ1Blcm1pdHRlZChwZXJtaXR0ZWQgPT09IHRydWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBQb3B1cEVESy50cmFja2VyID0gUG9wdXBFREsuc2VydmljZS5nZXRUcmFja2VyKCdVQS0xNjAxODI5NTUtMScpOyAgLy8gR0EgVHJhY2tpbmcgSUQuXG5cbiAgICAgICAgUG9wdXBFREsudHJhY2tlci5zZW5kQXBwVmlldygnTWFpblZpZXcnKTtcblxuICAgICAgICBQb3B1cEVESy50cmFja2VyLnNlbmRFdmVudCgnUG9wdXAnLCAnT3BlbicsIFwiTCd1dGlsaXNhdGV1ciBhIG91dmVydCBsYSBwb3B1cFwiKTtcbiAgICB9XG59O1xuIl19
