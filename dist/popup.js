var PopupEDK,main=main||{};main.General=function(){},main.General.prototype={init:function(){PopupEDK.switch(),PopupEDK.onPopupOpen(),PopupEDK.googleSearch(),PopupEDK.closeAlert(),PopupEDK.showNoDomainAlert(),PopupEDK.translations(),PopupEDK.analytics()}},$(document).ready(function(){(new main.General).init()}),PopupEDK={service:void 0,tracker:void 0,tmpConsent:void 0,switch:function(){$(".switch-onoff__slide").on("click",function(e){e.preventDefault(),chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"switch"},function(e){PopupEDK.switchBtn()})})})},logStorage:function(o){chrome.storage.sync.get([o],function(e){console.log(e[o])})},addBodyClass:function(e){!0===e?$("body").removeClass("EDK__body"):!1===e&&$("body").addClass("EDK__body")},switchBtn:function(){var n=$(".switch-onoff__slide");chrome.storage.sync.get(["dk"],function(e){"disabled"===e.dk?(chrome.storage.sync.set({dk:"enabled"}),n.removeClass("open"),PopupEDK.addBodyClass(!0)):(chrome.storage.sync.set({dk:"disabled"}),n.addClass("open"),PopupEDK.addBodyClass(!1));var o="disabled"===e.dk?"dark enabled":"dark disabled";PopupEDK.tracker.sendEvent("Popup","Switch","L'utilisateur a fait un switch | Status : "+o)})},onPopupOpen:function(){var o=$(".switch-onoff__slide");void 0!==chrome.storage&&chrome.storage.sync.get(["dk"],function(e){"disabled"===e.dk?(o.addClass("open"),PopupEDK.addBodyClass(!1)):("undefined"===e.dk&&chrome.storage.sync.set({dk:"disabled"}),o.removeClass("open"),PopupEDK.addBodyClass(!0))})},googleSearch:function(){$("#google-search").on("submit",function(){PopupEDK.tracker.sendEvent("Popup","Search","L'utilisateur a fait une recherche google");var e=$(this).attr("action");$input=$(this).find(".search__input");var o=e+"?"+$input.attr("name")+"="+$input.val();chrome.storage.sync.set({url:o}),chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"redirect"},function(e){e&&("redirect"===e.done?console.log("Redirected"):console.log(e))})})})},closeAlert:function(){var e=$(".alert"),o=[];void 0!==chrome.storage&&chrome.storage.sync.get(["alerts"],function(e){void 0!==e.alerts&&(o=e.alerts),void 0!==o&&$.each(o,function(e,o){$("div[data-alert-id="+o+"]").addClass("d-none")})}),setTimeout(function(){e.length!==o.length&&$(".warning__container").removeClass("d-none")},250),$(".alert button").on("click",function(){PopupEDK.tmpConsent=$(this).data("agree")}),e.on("closed.bs.alert",function(){void 0!==chrome.storage&&(o.push($(this).data("alert-id")),chrome.storage.sync.set({alerts:o}),PopupEDK.tmpConsent&&(chrome.storage.sync.set({rgpd_consent:PopupEDK.tmpConsent}),PopupEDK.tmpConsent=void 0))})},showNoDomainAlert:function(){new Promise(function(o,n){chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendRequest(e[0].id,{action:"testConnection"},function(e){e?"ConnectionSuccess"===e.done?o("ConnectionSuccess"):n(e):n("ConnectionFailed")})})}).then(function(e){console.log(e)}).catch(function(e){console.error(e),$(".popup__disabled, .popup__container").toggleClass("d-none")})},translations:function(){for(var e=$("[data-i18n]"),o=0;o<e.length;++o){var n=e[o],t=n.getAttribute("data-i18n");switch(n.getAttribute("data-i18n-target")){case"placeholder":n.attr("placeholder",t);break;default:n.innerHTML=PopupEDK.getTranslation(t)}}},getTranslation:function(e,o){return chrome.i18n.getMessage(e)},analytics:function(){PopupEDK.service=analytics.getService("ecosia_extension"),PopupEDK.service.getConfig().addCallback(function(n){chrome.storage.sync.get(["rgpd_consent"],function(e){var o=e.rgpd_consent;n.setTrackingPermitted(!0===o)})}),PopupEDK.tracker=PopupEDK.service.getTracker("UA-160182955-1"),PopupEDK.tracker.sendAppView("MainView"),PopupEDK.tracker.sendEvent("Popup","Open","L'utilisateur a ouvert la popup")}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvcHVwLmpzIl0sIm5hbWVzIjpbIlBvcHVwRURLIiwibWFpbiIsIkdlbmVyYWwiLCJwcm90b3R5cGUiLCJpbml0Iiwic3dpdGNoIiwib25Qb3B1cE9wZW4iLCJnb29nbGVTZWFyY2giLCJjbG9zZUFsZXJ0Iiwic2hvd05vRG9tYWluQWxlcnQiLCJ0cmFuc2xhdGlvbnMiLCJhbmFseXRpY3MiLCIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsInNlcnZpY2UiLCJ1bmRlZmluZWQiLCJ0cmFja2VyIiwidG1wQ29uc2VudCIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2hyb21lIiwidGFicyIsInF1ZXJ5IiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsInNlbmRSZXF1ZXN0IiwiaWQiLCJhY3Rpb24iLCJyZXNwIiwic3dpdGNoQnRuIiwibG9nU3RvcmFnZSIsImtleSIsInN0b3JhZ2UiLCJzeW5jIiwiZ2V0IiwicmVzdWx0IiwiY29uc29sZSIsImxvZyIsImFkZEJvZHlDbGFzcyIsImlzRGFyayIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJidXR0b24iLCJkayIsInNldCIsInN0YXR1cyIsInNlbmRFdmVudCIsInRoaXMiLCJhdHRyIiwiJGlucHV0IiwiZmluZCIsInVybCIsInZhbCIsImRvbmUiLCIkYWxsQWxlcnRzIiwiY2hyb21lU3RvcmFnZUFsZXJ0cyIsImFsZXJ0cyIsImVhY2giLCJpIiwidmFsdWUiLCJzZXRUaW1lb3V0IiwibGVuZ3RoIiwiZGF0YSIsInB1c2giLCJyZ3BkX2NvbnNlbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsImVycm9yIiwidG9nZ2xlQ2xhc3MiLCJ0cmFuc2xhdGVfZWxtdHMiLCJpdGVtIiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiZ2V0VHJhbnNsYXRpb24iLCJwYXJhbXMiLCJpMThuIiwiZ2V0TWVzc2FnZSIsImdldFNlcnZpY2UiLCJnZXRDb25maWciLCJhZGRDYWxsYmFjayIsImNvbmZpZyIsInBlcm1pdHRlZCIsInNldFRyYWNraW5nUGVybWl0dGVkIiwiZ2V0VHJhY2tlciIsInNlbmRBcHBWaWV3Il0sIm1hcHBpbmdzIjoiQUFDQSxJQXVCQUEsU0F2QkFDLEtBQUFBLE1BQUEsR0FFQUEsS0FBQUMsUUFBQSxhQUdBRCxLQUFBQyxRQUFBQyxVQUFBLENBQ0FDLEtBQUEsV0FDQUosU0FBQUssU0FDQUwsU0FBQU0sY0FDQU4sU0FBQU8sZUFDQVAsU0FBQVEsYUFDQVIsU0FBQVMsb0JBQ0FULFNBQUFVLGVBQ0FWLFNBQUFXLGNBSUFDLEVBQUFDLFVBQUFDLE1BQUEsWUFDQSxJQUFBYixLQUFBQyxTQUNBRSxTQUtBSixTQUFBLENBQ0FlLGFBQUFDLEVBQ0FDLGFBQUFELEVBQ0FFLGdCQUFBRixFQUNBWCxPQUFBLFdBQ0FPLEVBQUEsd0JBQ0FPLEdBQUEsUUFBQSxTQUFBQyxHQUNBQSxFQUFBQyxpQkFDQUMsT0FBQUMsS0FBQUMsTUFBQSxDQUFBQyxRQUFBLEVBQUFDLGVBQUEsR0FBQSxTQUFBSCxHQUNBRCxPQUFBQyxLQUFBSSxZQUFBSixFQUFBLEdBQUFLLEdBQUEsQ0FBQUMsT0FBQSxVQUFBLFNBQUFDLEdBQ0E5QixTQUFBK0IsbUJBS0FDLFdBQUEsU0FBQUMsR0FDQVgsT0FBQVksUUFBQUMsS0FBQUMsSUFBQSxDQUFBSCxHQUFBLFNBQUFJLEdBQ0FDLFFBQUFDLElBQUFGLEVBQUFKLE9BR0FPLGFBQUEsU0FBQUMsSUFDQSxJQUFBQSxFQUNBN0IsRUFBQSxRQUFBOEIsWUFBQSxjQUNBLElBQUFELEdBQ0E3QixFQUFBLFFBQUErQixTQUFBLGNBR0FaLFVBQUEsV0FDQSxJQUFBYSxFQUFBaEMsRUFBQSx3QkFDQVUsT0FBQVksUUFBQUMsS0FBQUMsSUFBQSxDQUFBLE1BQUEsU0FBQUMsR0FDQSxhQUFBQSxFQUFBUSxJQUNBdkIsT0FBQVksUUFBQUMsS0FBQVcsSUFBQSxDQUFBRCxHQUFBLFlBQ0FELEVBQUFGLFlBQUEsUUFDQTFDLFNBQUF3QyxjQUFBLEtBRUFsQixPQUFBWSxR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QUFBLENBQ0EsSUFBQWUsRUFBQUQsRUFBQWQsR0FFQTNCLEVBQUEwQyxFQUFBQyxhQUFBLGFBR0EsT0FGQUQsRUFBQUMsYUFBQSxxQkFHQSxJQUFBLGNBQ0FELEVBQUF6QixLQUFBLGNBQUFqQixHQUNBLE1BQ0EsUUFDQTBDLEVBQUFFLFVBQUE3RSxTQUFBOEUsZUFBQTdDLE1BSUE2QyxlQUFBLFNBQUE3QyxFQUFBOEMsR0FDQSxPQUFBekQsT0FBQTBELEtBQUFDLFdBQUFoRCxJQUVBdEIsVUFBQSxXQUNBWCxTQUFBZSxRQUFBSixVQUFBdUUsV0FBQSxvQkFFQWxGLFNBQUFlLFFBQUFvRSxZQUFBQyxZQUNBLFNBQUFDLEdBQ0EvRCxPQUFBWSxRQUFBQyxLQUFBQyxJQUFBLENBQUEsZ0JBQUEsU0FBQUMsR0FDQSxJQUFBaUQsRUFBQWpELEVBQUE2QixhQUNBbUIsRUFBQUUsc0JBQUEsSUFBQUQsT0FJQXRGLFNBQUFpQixRQUFBakIsU0FBQWUsUUFBQXlFLFdBQUEsa0JBRUF4RixTQUFBaUIsUUFBQXdFLFlBQUEsWUFFQXpGLFNBQUFpQixRQUFBK0IsVUFBQSxRQUFBLE9BQUEiLCJmaWxlIjoicG9wdXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZWNsYXJlIG5hbWVzcGFjZVxudmFyIG1haW4gPSBtYWluIHx8IHt9O1xuXG5tYWluLkdlbmVyYWwgPSBmdW5jdGlvbiAoKSB7XG59O1xuXG5tYWluLkdlbmVyYWwucHJvdG90eXBlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgUG9wdXBFREsuc3dpdGNoKCk7XG4gICAgICAgIFBvcHVwRURLLm9uUG9wdXBPcGVuKCk7XG4gICAgICAgIFBvcHVwRURLLmdvb2dsZVNlYXJjaCgpO1xuICAgICAgICBQb3B1cEVESy5jbG9zZUFsZXJ0KCk7XG4gICAgICAgIFBvcHVwRURLLnNob3dOb0RvbWFpbkFsZXJ0KCk7XG4gICAgICAgIFBvcHVwRURLLnRyYW5zbGF0aW9ucygpO1xuICAgICAgICBQb3B1cEVESy5hbmFseXRpY3MoKTtcbiAgICB9XG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGcgPSBuZXcgbWFpbi5HZW5lcmFsKCk7XG4gICAgZy5pbml0KCk7XG59KTtcblxuLy9TdGFydFxudmFyIFBvcHVwRURLO1xuUG9wdXBFREsgPSB7XG4gICAgc2VydmljZTogdW5kZWZpbmVkLFxuICAgIHRyYWNrZXI6IHVuZGVmaW5lZCxcbiAgICB0bXBDb25zZW50OiB1bmRlZmluZWQsXG4gICAgc3dpdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidXR0b24gPSAkKCcuc3dpdGNoLW9ub2ZmX19zbGlkZScpO1xuICAgICAgICBidXR0b24ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHthY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWV9LCBmdW5jdGlvbiAodGFicykge1xuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRSZXF1ZXN0KHRhYnNbMF0uaWQsIHthY3Rpb246IFwic3dpdGNoXCJ9LCBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICBQb3B1cEVESy5zd2l0Y2hCdG4oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGxvZ1N0b3JhZ2U6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoW2tleV0sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFtrZXldKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRCb2R5Q2xhc3M6IGZ1bmN0aW9uIChpc0RhcmspIHtcbiAgICAgICAgaWYgKGlzRGFyayA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdFREtfX2JvZHknKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhcmsgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ0VES19fYm9keScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzd2l0Y2hCdG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1dHRvbiA9ICQoJy5zd2l0Y2gtb25vZmZfX3NsaWRlJyk7XG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsnZGsnXSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kayA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtkazogJ2VuYWJsZWQnfSk7XG4gICAgICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgUG9wdXBFREsuYWRkQm9keUNsYXNzKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7ZGs6ICdkaXNhYmxlZCd9KTtcbiAgICAgICAgICAgICAgICBidXR0b24uYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICBQb3B1cEVESy5hZGRCb2R5Q2xhc3MoZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzdWx0LmRrID09PSAnZGlzYWJsZWQnID8gJ2RhcmsgZW5hYmxlZCcgOiAnZGFyayBkaXNhYmxlZCc7XG4gICAgICAgICAgICBQb3B1cEVESy50cmFja2VyLnNlbmRFdmVudCgnUG9wdXAnLCAnU3dpdGNoJywgXCJMJ3V0aWxpc2F0ZXVyIGEgZmFpdCB1biBzd2l0Y2ggfCBTdGF0dXMgOiBcIiArIHN0YXR1cyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgb25Qb3B1cE9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1dHRvbiA9ICQoJy5zd2l0Y2gtb25vZmZfX3NsaWRlJyk7XG4gICAgICAgIGlmIChjaHJvbWUuc3RvcmFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChbJ2RrJ10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRrID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRDbGFzcygnb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICBQb3B1cEVESy5hZGRCb2R5Q2xhc3MoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRrID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7ZGs6ICdkaXNhYmxlZCd9KTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIFBvcHVwRURLLmFkZEJvZHlDbGFzcyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgUG9wdXBFREsuYWRkQm9keUNsYXNzKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnb29nbGVTZWFyY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCgnI2dvb2dsZS1zZWFyY2gnKS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgUG9wdXBFREsudHJhY2tlci5zZW5kRXZlbnQoJ1BvcHVwJywgJ1NlYXJjaCcsIFwiTCd1dGlsaXNhdGV1ciBhIGZhaXQgdW5lIHJlY2hlcmNoZSBnb29nbGVcIik7XG5cbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSAkKHRoaXMpLmF0dHIoJ2FjdGlvbicpO1xuICAgICAgICAgICAgJGlucHV0ID0gJCh0aGlzKS5maW5kKCcuc2VhcmNoX19pbnB1dCcpO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSAkaW5wdXQuYXR0cignbmFtZScpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gJGlucHV0LnZhbCgpO1xuICAgICAgICAgICAgdmFyIHVybCA9IGFjdGlvbiArICc/JyArIG5hbWUgKyAnPScgKyB2YWx1ZTtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHt1cmw6IHVybH0pO1xuXG4gICAgICAgICAgICBjaHJvbWUudGFicy5xdWVyeSh7YWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlfSwgZnVuY3Rpb24gKHRhYnMpIHtcbiAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5zZW5kUmVxdWVzdCh0YWJzWzBdLmlkLCB7YWN0aW9uOiBcInJlZGlyZWN0XCJ9LCBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3AuZG9uZSA9PT0gXCJyZWRpcmVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlZGlyZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGNsb3NlQWxlcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRhbGxBbGVydHMgPSAkKCcuYWxlcnQnKSxcbiAgICAgICAgICAgIGNocm9tZVN0b3JhZ2VBbGVydHMgPSBbXTtcbiAgICAgICAgaWYgKGNocm9tZS5zdG9yYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsnYWxlcnRzJ10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmFsZXJ0cyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBjaHJvbWVTdG9yYWdlQWxlcnRzID0gcmVzdWx0LmFsZXJ0cztcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lU3RvcmFnZUFsZXJ0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChjaHJvbWVTdG9yYWdlQWxlcnRzLCBmdW5jdGlvbiAoaSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2RpdltkYXRhLWFsZXJ0LWlkPScgKyB2YWx1ZSArICddJykuYWRkQ2xhc3MoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRhbGxBbGVydHMubGVuZ3RoICE9PSBjaHJvbWVTdG9yYWdlQWxlcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICQoJy53YXJuaW5nX19jb250YWluZXInKS5yZW1vdmVDbGFzcygnZC1ub25lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDI1MCk7XG5cbiAgICAgICAgJCgnLmFsZXJ0IGJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFBvcHVwRURLLnRtcENvbnNlbnQgPSAkKHRoaXMpLmRhdGEoJ2FncmVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRhbGxBbGVydHMub24oJ2Nsb3NlZC5icy5hbGVydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjaHJvbWUuc3RvcmFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2hyb21lU3RvcmFnZUFsZXJ0cy5wdXNoKCQodGhpcykuZGF0YShcImFsZXJ0LWlkXCIpKTtcbiAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7YWxlcnRzOiBjaHJvbWVTdG9yYWdlQWxlcnRzfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoUG9wdXBFREsudG1wQ29uc2VudCkge1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7cmdwZF9jb25zZW50OiBQb3B1cEVESy50bXBDb25zZW50fSk7XG4gICAgICAgICAgICAgICAgICAgIFBvcHVwRURLLnRtcENvbnNlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHNob3dOb0RvbWFpbkFsZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0cnlDb25uZWN0aW9uID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkoe2FjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZX0sIGZ1bmN0aW9uICh0YWJzKSB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnRhYnMuc2VuZFJlcXVlc3QodGFic1swXS5pZCwge2FjdGlvbjogXCJ0ZXN0Q29ubmVjdGlvblwifSwgZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwLmRvbmUgPT09IFwiQ29ubmVjdGlvblN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ0Nvbm5lY3Rpb25TdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXNwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnQ29ubmVjdGlvbkZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5Q29ubmVjdGlvbi50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAgICAgICAgfSkuY2F0Y2goXG4gICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAkKCcucG9wdXBfX2Rpc2FibGVkLCAucG9wdXBfX2NvbnRhaW5lcicpLnRvZ2dsZUNsYXNzKCdkLW5vbmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9LFxuICAgIHRyYW5zbGF0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHJhbnNsYXRlX2VsbXRzID0gJChcIltkYXRhLWkxOG5dXCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zbGF0ZV9lbG10cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0cmFuc2xhdGVfZWxtdHNbaV07XG5cbiAgICAgICAgICAgIHZhciBrZXkgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pMThuJyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaTE4bi10YXJnZXQnKTtcblxuICAgICAgICAgICAgc3dpdGNoICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdwbGFjZWhvbGRlcic6XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYXR0cigncGxhY2Vob2xkZXInLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpdGVtLmlubmVySFRNTCA9IFBvcHVwRURLLmdldFRyYW5zbGF0aW9uKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldFRyYW5zbGF0aW9uOiBmdW5jdGlvbiAoa2V5LCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIGNocm9tZS5pMThuLmdldE1lc3NhZ2Uoa2V5KTtcbiAgICB9LFxuICAgIGFuYWx5dGljczogZnVuY3Rpb24gKCkge1xuICAgICAgICBQb3B1cEVESy5zZXJ2aWNlID0gYW5hbHl0aWNzLmdldFNlcnZpY2UoJ2Vjb3NpYV9leHRlbnNpb24nKTtcblxuICAgICAgICBQb3B1cEVESy5zZXJ2aWNlLmdldENvbmZpZygpLmFkZENhbGxiYWNrKFxuICAgICAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFsncmdwZF9jb25zZW50J10sIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlcm1pdHRlZCA9IHJlc3VsdC5yZ3BkX2NvbnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zZXRUcmFja2luZ1Blcm1pdHRlZChwZXJtaXR0ZWQgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgUG9wdXBFREsudHJhY2tlciA9IFBvcHVwRURLLnNlcnZpY2UuZ2V0VHJhY2tlcignVUEtMTYwMTgyOTU1LTEnKTsgIC8vIEdBIFRyYWNraW5nIElELlxuXG4gICAgICAgIFBvcHVwRURLLnRyYWNrZXIuc2VuZEFwcFZpZXcoJ01haW5WaWV3Jyk7XG5cbiAgICAgICAgUG9wdXBFREsudHJhY2tlci5zZW5kRXZlbnQoJ1BvcHVwJywgJ09wZW4nLCBcIkwndXRpbGlzYXRldXIgYSBvdXZlcnQgbGEgcG9wdXBcIik7XG4gICAgfVxufTtcbiJdfQ==
